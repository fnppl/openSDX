<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>openSDX :: KeyServer :: KeyGraph</title>
		<link rel="stylesheet" type="text/css" href="/osdx_keyserver/css/graph.css">
		</link>
		<script type="text/javascript" src="/osdx_keyserver/scripts/jquery-1.7.1.min.js"></script>
		<script type="text/javascript" src="/osdx_keyserver/scripts/jquery-ui-1.8.17.custom.min.js"></script>
		<script type="text/javascript">
			$(document).ready(function() {
				
				var nodes = [
					{keyid: "A", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "B", level: "SUB",    usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "C", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "D", level: "SUB",    usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "E", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "F", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "G", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "H", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "I", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "J", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "K", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "L", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "M", level: "REVOKE", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "N", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "O", level: "REVOKE", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "P", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "Q", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "R", level: "SUB", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "S", level: "MASTER", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"},
					{keyid: "T", level: "SUB", usage: "onlysign", validFrom: "2011-01-01", validUntil: "2012-12-31", owner: "bert@it-is-awesome.de"}
					
				];
				
				var edges = [
				 { keyFrom: "A", keyTo: "B", action: "approve"},
				 { keyFrom: "C", keyTo: "D", action: "disapprove"},
				 { keyFrom: "B", keyTo: "C", action: "revoke"},
				 { keyFrom: "G", keyTo: "H", action: "revoke"},
				 { keyFrom: "O", keyTo: "A", action: "revoke"},
				 { keyFrom: "A", keyTo: "B", action: "approve"},
				 { keyFrom: "A", keyTo: "B", action: "approve"},
				 { keyFrom: "N", keyTo: "B", action: "approve"},
				 { keyFrom: "A", keyTo: "B", action: "approve"},
				 { keyFrom: "T", keyTo: "L", action: "approve"},
				 { keyFrom: "L", keyTo: "R", action: "approve"},
				 { keyFrom: "K", keyTo: "T", action: "approve"}
				
				];
				
				
				//create nodes
				function createAllNodes() {
					$("#nodes").empty();
					var nodecount = nodes.length;
					var pos = $("#lines").offset();
					
					var mX = $("#lines").width()/2 + pos.left;
					var mY = $("#lines").height()/2 + pos.top;
					var radius = $("#lines").height()/2-30;
					
					var winkel = 2.0 * Math.PI / nodecount;
					
					for (var i = 0; i< nodecount; i++) {
						var el = document.createElement("span");
						el.className = nodes[i].level;
						el.id = nodes[i].keyid;
						var x = mX + Math.cos(i*winkel)*radius;
						var y = mY + Math.sin(i*winkel)*radius;
						if (el.className == "revokekey") {
							x = x - 50;
						}
						el.style.top = y+'px';
						el.style.left = x+'px';
						$("#nodes").append(el);
						
						//$('#'+el.id).draggable({containment: '#lines',drag: layoutEvent, stop: layoutEvent});
						$(el).html(''+(i+1));
						$(el).draggable({containment: '#lines',drag: layoutEvent, stop: layoutEvent});
					}
				}
				
				
				//create Edges
				var isIE = navigator.userAgent.indexOf("MSIE") > -1;				
				
				function createLine(x1, y1, x2, y2) {
					if(x2 < x1) {
						var temp = x1;
						x1 = x2;
						x2 = temp;
						temp = y1;
						y1 = y2;
						y2 = temp;
					}
					var line = document.createElement("span");
					line.className = "line";
					var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
					line.style.width = length + "px";

					if(isIE) {
						line.style.top = (y2 > y1) ? y1 + "px" : y2 + "px";
						line.style.left = x1 + "px";
						var nCos = (x2 - x1) / length;
						var nSin = (y2 - y1) / length;
						line.style.filter = "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=" + nCos + ", M12=" + -1 * nSin + ", M21=" + nSin + ", M22=" + nCos + ")";
					} else {
						var angle = Math.atan((y2 - y1) / (x2 - x1));
						line.style.top = y1 + 0.5 * length * Math.sin(angle) + "px";
						line.style.left = x1 - 0.5 * length * (1 - Math.cos(angle)) + "px";
						line.style.MozTransform = line.style.WebkitTransform = line.style.OTransform = "rotate(" + angle + "rad)";
					}
					
					return line;
				};
				
				function createArrow(x1, y1, x2, y2) {
					var arrow = document.createElement("span");
					arrow.className = "arrow";
					arrow.appendChild(createLine(x1,y1,x2,y2));
					
					//TODO create arrow lines
					//arrow.appendChild(createLine(x1-5,y1-5,x2,y2));
					//arrow.appendChild(createLine(x1+5,y1+5,x2,y2));
					
					
					return arrow;
				};
				
				function getX(nodeid) {
					//var msg = 'hallo '+$('#'+nodeid).attr("class").indexOf("revokekey"); 
					//alert(msg);
					if ($('#'+nodeid).attr("class").indexOf("REVOKE") != -1) {
						 return parseFloat($('#'+nodeid).css("left"))+45;
					}
					return parseFloat($('#'+nodeid).css("left"))+20;
				}
				function getY(nodeid) {
					return parseFloat($('#'+nodeid).css("top"))+10;
				}
				function createAllLines() {
					$("#lines").empty();
					
					for each (var keylog in edges){ 
			         	$("#lines").append(createArrow( getX(keylog.keyFrom), getY(keylog.keyFrom), getX(keylog.keyTo), getY(keylog.keyTo) ) );
			      	}
				}
				
				function getID(keyid) {
					for (i = 0;i<19;i++) {
						keyid = keyid.replace(":","_");
					}
					return keyid.replace("@","_");
				}
				
				function hasNode(keyid) {
					var nid = getID(keyid);
					var len = nodes.length;
					if (len>0) {
						for (i =0; i< len; i++) {
							if (nodes[i].keyid == nid) {
								return true;
							}	
						}
					}
					return false;
				}
				
				function hasEdge(fromkey, tokey, action) {
					
					var len = edges.length;
					if (len>0) {
						for (i =0; i< len; i++) {
							if (edges[i].keyFrom == fromkey && edges[i].keyTo == tokey && edges[i].action == action) {
								return true;
							}	
						}
					}
					return false;
				}
				
				//redraw button
				$("#bu_redraw").click(function(e) { 
					createAllNodes();
					createAllLines();
				});
				
				//clear button
				$("#bu_clear").click(function(e) {
					nodes = [];
					edges = [];
					createAllNodes();
					createAllLines();
				});
				

				//addkey button
				$("#bu_addkey").click(function(e) {
					//var url = '/osdx_keyserver/ActionServlet/ajax_nodes_edges/keyid/'+$(#tx_keyid).value();
					var url = '/osdx_keyserver/ActionServlet/ajax_nodes_edges/keyid/'+escape($("#tx_keyid").attr("value"));
                    jQuery.get(
					    url,
					    function(xml) {
					    	
					    	//parse nodes
					    	$(xml).children("nodes_edges").children("pubkey").each(function() {
					    		if (!hasNode($(this).children("keyid").text())) {
						    		var node = {
						    			keyid: getID($(this).children("keyid").text()),
						    			level: $(this).children("level").text(),
						    			usage: $(this).children("usage").text(),
						    			validFrom: $(this).children("valid_from").text(),
						    			validUntil: $(this).children("valid_until").text(),
						    			owner: "unknown"
						    		};
					    			nodes.push(node);
					    		}
					    	});
					    	
					    	//parse edges
					    	$(xml).children("nodes_edges").children("keylog").each(function() {
					    		var act = "unknown";
					    		if ($(this).find("approval_pending").length>0) {
					    			act = "approval_pending";
					    		}
					    		else if ($(this).find("approval").length>0) {
					    			act = "approval";
					    		}
					    		var edge = {
					    			keyFrom: getID($(this).find("from_keyid").text()),
									keyTo: getID($(this).find("to_keyid").text()),
					    			action: act
					    		};
					    		if (!hasEdge(edge.keyFrom, edge.keyTo, edge.action)) {
					    			edges.push(edge);	
					    		}
					    	});
					    	createAllNodes();
							createAllLines();
							
					    	//alert(nodes.toSource());
					    	//alert(edges.toSource());
					    },
					    "xml"
					);
				});
				
				//init
				createAllNodes();
				createAllLines();
				
				//mousedrag on all nodes
				$("#nodes").each(function() {
					$(this).find('*').draggable({containment: '#lines',drag: layoutEvent, stop: layoutEvent});
				});
					
				function layoutEvent( event, ui ) {
					createAllLines();
				}
				
				//alert(edges.toSource());
			});

			
		</script>
		<noscript>
			JavaScript not available.
		</noscript>
	</head>
	<body>
		<h1>Graph</h1>
		<div id="lines" style="width: 700px; height: 600px; background-color: #eeeeee;"></div>
		<div id="nodes">
			<span id="A" class="MASTER" style="top: 122px; left: 208px;"></span>
			<span id="B" class="subkey" style="top: 218px; left: 328px;"></span>
			<span id="C" class="MASTER" style="top: 230px; left: 128px;"></span>
			<span id="D" class="MASTER" style="top: 145px; left: 77px;"></span>
			<span id="E" class="subkey" style="top: 303px; left: 251px;"></span>
			<span id="F" class="subkey" style="top: 165px; left: 430px;"></span>
		</div>
		<button id="bu_redraw">redraw</button>
		<button id="bu_clear">clear</button>
		<p>
			<input type="text" name="keyid" id="tx_keyid" size="80" value="D8D9B36CA80CAF2516EEC9D1AE8631AB1E65D4A1"/>
			<button id="bu_addkey">add key</button>
		</p>
		<div id="keydetails">
			
		</div>
	</body>
</html>