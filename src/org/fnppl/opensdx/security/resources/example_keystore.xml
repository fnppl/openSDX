<?xml version="1.0" encoding="UTF-8"?>

<!-- 
/*
 * Copyright (C) 2010-2011 
 * 							fine people e.V. <opensdx@fnppl.org> 
 * 							Henning Thieß <ht@fnppl.org>
 * 
 * 							http://fnppl.org
 * 
 * 
 * This file is part of openSDX
 * openSDX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * openSDX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * and GNU General Public License along with openSDX.
 * If not, see <http://www.gnu.org/licenses/>.
 *      
 */
-->

<keystore>
	<keys>
		<keypair>
			<identities>
				<identity>
					<email>jaja@kakak.nät</email><!-- MUST -->
					<mnemonic></mnemonic><!-- SHOULD ; shorthandle for this identities-purpose "residency" or "work" or whatever -->
					<phone>+44 99 00202021</phone><!-- COULD -->
					<country></country><!-- COULD -->
					<region></region><!-- COULD -->
					<postcode></postcode><!-- COULD -->		
					<company></company><!-- COULD -->
					<unit></unit><!-- COULD -->
					<subunit></subunit><!-- COULD -->
					
					<function></function><!-- COULD ; function of that person -->
					<surname></surname><!-- COULD -->
					<middlename></middlename><!-- COULD -->
					<name></name><!-- COULD -->
					
					<note></note><!-- COULD -->
					<sha1></sha1><!-- sha1 as hex of concat of all above fields (also empty ones) -->
					<!-- please be aware of the exact order of these fields... -->
				</identity>
				<identity>
					<email>jaja22@kakak.nät</email><!-- MUST -->
					<mnemonic></mnemonic><!-- SHOULD ; shorthandle for this identities-purpose "residency" or "work" or whatever -->
					<phone>+44 99 0020202221</phone><!-- COULD -->
					<country></country><!-- COULD -->
					<region></region><!-- COULD -->
					<postcode></postcode><!-- COULD -->		
					<company></company><!-- COULD -->
					<unit></unit><!-- COULD -->
					<subunit></subunit><!-- COULD -->
					
					<function></function><!-- COULD ; function of that person -->
					<surname></surname><!-- COULD -->
					<middlename></middlename><!-- COULD -->
					<name></name><!-- COULD -->
					
					<note></note><!-- COULD -->
					<sha1></sha1><!-- sha1 as hex of concat of all above fields -->
					<!-- please be aware of the exact order of these fields... -->
				</identity>
			</identities>
			
			<sha1fingerprint>292992</sha1fingerprint><!-- sha1-fingerprint in hex with leading 0x for modulus -->
			<usage>ONLYSIGN</usage><!-- ONLYSIGN|CRYPT|BOTH -->
			<algo>RSA</algo><!-- RSA ; others not implemented yet -->
			<bits>3072</bits>
			<modulus></modulus><!-- as hex-string with leading 0x ; only for RSA?! -->
			
			<pubkey>
				<exponent></exponent><!-- as hex-string with leading 0x -->				
			</pubkey><!-- theoretically pubkey could also be missing, but somewhat useless then... -->
			<privkey>				
				<bytes>
					<locked>
						<mantraname>yessir, gimme da pass!</mantraname>
						<algo>AES256</algo>
						<initvector>0x9191919919</initvector>
						<padding>CBC/PKCS#5</padding>
						<exponent></exponent><!-- as hex-string with leading 0x -->
					</locked>
				</bytes><!-- as hex-string with leading 0x -->				
			</privkey><!-- privkey may be missing -->
			
			<gpgkeyserverid></gpgkeyserverid><!-- id on gpg-keyserver - we are not allone... -->
		</keypair>
	</keys>
	
	
	<keylog>
		<action>
			<date>2011-01-01 00:00:00 GMT+00</date>
			<ipv4>919191</ipv4><!-- lets assume, those actions are always made via net -->
			<ipv6>91921929</ipv6><!-- lets assume, those actions are always made via net -->

			<from>
				<email>kakaka@llalal.nät</email><!-- MUST -->
				<sha1fingerprint></sha1fingerprint><!-- MUST sha1-fingerprint in hex with leading 0x for modulus of that signing-entity -->
			</from><!-- self-approval also works this way... -->
			<to>
				<email>kakaka2@llalal.nät</email><!-- MUST -->								
				<sha1fingerprint></sha1fingerprint><!-- MUST sha1-fingerprint in hex with leading 0x for modulus of that target-entity -->
			</to><!-- self-approval also works this way... -->
			
			<approval>
				<of>
					<identity>
						<email>akakak@lalal</email><!-- COULD ; list only those fields, that are approved/disapproved/revoked -->
						<function></function><!-- COULD ; list only those fields, that are approved/disapproved/revoked -->
						<sha1></sha1><!-- sha1 as hex of concat of all above fields (also empty ones) -->
					</identity><!-- please be aware of the exact order of these fields... -->
				</of>
			</approval><!-- approval/disapproval/revocation -->
		</action>
	</keylog>
</keystore>



